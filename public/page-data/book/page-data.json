{"componentChunkName":"component---src-templates-blog-post-js","path":"/book/","result":{"data":{"site":{"siteMetadata":{"title":"Opinionated Guide to React"}},"markdownRemark":{"id":"110f6d49-35d6-508b-a483-9c4095b87e75","excerpt":"The Book This Book is not supposed to ever serve as a teaching mechanism for react but more of a way to see react from the eyes of someone who has been using it…","html":"<h1>The Book</h1>\n<p>This Book is not supposed to ever serve as a teaching mechanism for react but more of a way to see react from the eyes of someone who has been using it for years and got sick of the “it depends”.\nAll I will show you here is things either I use(d) or things developers I trust have used.</p>\n<p>Also opinions will be shared that you may agree or not but to show the options and point of view is my objective with this book.</p>\n<h2>What will you learn?</h2>\n<p>Probably not how to use react from the basics but a clearer picture of how bigger react apps work, a bit of the tools they use, the ups and downs, their structure and also some knowledge on how to use these tools yourself.\nWe will start with some things like folder and name structure and then go into packages, starter kits and many more.</p>\n<h2>Folder/ File Structuring</h2>\n<p>In this chapter we will be talking about structure, in simple terms how I usually structure applications in terms of folder position, file exports and some other small tidbits.</p>\n<h1>Folder</h1>\n<p>In apps and websites I have built with react I tend to have a similar structure that seems to work and that looks like so</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── src\n|   ├── index.js\n|   ├── components/\n|   ├──── button/\n|   ├────── index.js\n|   ├────── elements.(js/css)\n|   ├── pages/\n|   ├──── homepage/\n|   ├──── screens/\n|   ├────── hero/\n|   ├────── index.js\n|   ├────── elements.(js/css)\n|   ├──── index.js\n|   ├──── elements.(js/css)\n|   ├── index.js\n|   ├── utils/\n|   ├──── date.js\n|   ├── assets/\n|   ├──── icons/\n|   └────  images/</code></pre></div>\n<p>In the core I have 4 main folders:</p>\n<ul>\n<li><code class=\"language-text\">components</code> - This is where components used by more than one page or module get placed. These things usually don’t quite belong in a design system. One example can be a <code class=\"language-text\">SaveButton</code> this will be an extension of the button with some differences that will be used in a lot of places.\nIf no design system is in place basically anything that’s used by more than one page or component like an <code class=\"language-text\">Alert</code>.</li>\n<li><code class=\"language-text\">pages</code>- This is where your main pages will stay, this will have an <code class=\"language-text\">index.js</code> file that is where your route file be placed and where all these pages imported will be. Usually within a page you can have multiple sections like a hero, this won’t be used anywhere else, but it’s a crucial part and should have both an <code class=\"language-text\">index.js</code> and a styles file so we can put this in a folder as well to minimize the size of our files, while also making it easier to find things.</li>\n<li><code class=\"language-text\">assets</code> - This folder will contain all images and icons. I usually have both, so I find it easier to divide the folders since most of the times my icons will be in SVG and these will be translated into <code class=\"language-text\">JSX</code> and end up being also <code class=\"language-text\">JavaScript</code> files at their core.</li>\n<li><code class=\"language-text\">utils</code> - This is where your overly complicated functions go to. This is kind of like hiding the shame but in a calculated way. Let’s say you need to transform dates in a component and its a pretty heavy function. In my opinion this should be its own file maybe generalized to dates so it can export several functions for date manipulation - trust me, there is always date manipulation.</li>\n</ul>\n<h2>File naming</h2>\n<p>I always try to name my files <code class=\"language-text\">index.js</code> and let the folder name do the talking. This will allow me to have more freedom in the composition of that component or page, as more files may be added, and that way they all stay concise in that folder. So I may have something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/components/Alert/index.js</code></pre></div>\n<p>Even though it’s the index file, the way module resolution works in JavaScript you don’t need to specify <code class=\"language-text\">index.js</code> so you can just import like you would a file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Alert <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Alert\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will look for the file and then if it doesn’t find for the folder and an <code class=\"language-text\">index</code> file in that folder so don’t worry about more typing.</p>\n<h2>Exporting Components</h2>\n<p>For many years, I used the good old <code class=\"language-text\">export default</code> even though react always yelled at me, I would export a components like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sup?</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I am a button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One of the drawbacks with this is how more INCREDIBLY hard it becomes to find anything in the devTools. For VSCode users, it also removes the autocomplete because you never named the component.</p>\n<p>In the last years I have always exported the same component like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ButtonWrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Sup?</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">I am a button</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ButtonWrapper<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This has two main advantages over default:</p>\n<ul>\n<li>You can now see in the react devtools what the component name is making it for easier debugging and just overall cleaning of the devtools.</li>\n<li>Autocomplete in VSCode, even without TypeScript, VSCode is pretty smart to do a run down of your folders and see the components name and see what is what you want. It’s not bullet proof without TypeScript but honestly, it’s pretty impressive and more than enough for me to be productive</li>\n</ul>\n<h2>TypeScript</h2>\n<p>Let’s talk about the elephant in the room <em>TypeScript</em>.</p>\n<h4>Do you need it to build a react app?</h4>\n<p>Oh god no, even less in the start, I think TypeScript is one of those “pluck it in when you need it” type of tool. In the start it’s definitely not needed, maybe your app will start feeling very prone to errors and it’s a good idea but not in the start. Never in the start.</p>\n<h4>Should I use it for my marketing page?</h4>\n<p>Honestly…why? It will add way more complexity without improving gains a lot, you don’t have state, you don’t have complicated things, it’s a website and not an app, so in all honesty there is no need for something as heavy as that.</p>\n<h4>Fine, when do I need it?</h4>\n<p>When honestly you can’t manage state and you have no idea wtf is what anymore, and how many <code class=\"language-text\">isLoggedIn</code> states you have in your store, you need TypeScript when you would rather cry than manage state.</p>\n<h4>What things should have Redux?</h4>\n<p>In my opinion, state and design systems are things where TypeScript is quite handy because these are things you use all the time and need to know what props you want to use, what they take and all of those fancy things.</p>\n<h4>But what does a TypeScript react component look like?</h4>\n<p>Lets do one with state and props, let’s take this simple components and make it all TypeScript compatible:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AlertWrapper<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">,</span> CloseButton <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./elements\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Alert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClose<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> neverClose <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">,</span> setOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> open <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertWrapper</span></span> <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>neverClose <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CloseButton</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            onClose <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClose</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          x\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CloseButton</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this case we have some props we may want to type, and looking at them we have:</p>\n<ul>\n<li><code class=\"language-text\">onClose</code> - An optional function that returns nothing and takes the event to the parent component.</li>\n<li><code class=\"language-text\">type</code> - The type of alert this is and in our case it can either be: <code class=\"language-text\">success</code>, <code class=\"language-text\">error</code> or <code class=\"language-text\">warning</code>.</li>\n<li><code class=\"language-text\">children</code> - Any react nodes we want to pass as the message</li>\n<li><code class=\"language-text\">neverClose</code> - An optional boolean attribute to check if want the user to be able to close it.</li>\n</ul>\n<p>So let’s transfer this into an interface in TypeScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">;</span>\n  children<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  neverClose<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To apply this to the react component we do as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AlertWrapper<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">,</span> CloseButton <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./elements\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">;</span>\n  children<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  neverClose<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Alert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClose<span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> neverClose <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>open<span class=\"token punctuation\">,</span> setOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> open <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AlertWrapper</span></span> <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>neverClose <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CloseButton</span></span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            onClose <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClose</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          x\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CloseButton</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AlertWrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are many other types, but in general typing react components like these is not a though thing to do, but sometimes doing this will lead to more work like transpiling or debugging edge cases that is not always worth it.</p>\n<p>I have very strong opinions on TypeScript as I think it creates a barrier for people to get into web development in a way as open and accessible as I did, and most of the times for no reason. I would say 50% or more of apps don’t need TypeScript at all, more than 80% don’t need TypeScript all over their pages and 100% don’t need TypeScript in a marketing page with no state management.</p>\n<p>If you want your designer to make changes, add JSX, fix CSS and overall do some code, please avoid using TypeScript and it’s not something that they need to learn and consider if you yourself need it when making an open source project or if it’s creating a barrier of entrance for people who want to help.</p>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/book/","previous":{"fields":{"slug":"/content/blog/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":{"fields":{"slug":"/README/"},"frontmatter":{"title":""}}}}}